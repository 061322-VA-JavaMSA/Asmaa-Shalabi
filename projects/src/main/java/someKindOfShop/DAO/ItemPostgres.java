package someKindOfShop.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import someKindOfShop.shoppingList.Items;
import someKindOfShop.user.Customer;
import someKindOfShop.util.ConnectionUtil;

public class ItemPostgres implements ItemDAO{
	private static Logger log = LogManager.getLogger(ItemPostgres.class);

	@Override
	public Items addItem(Items t) {
		String sql = "insert into items (i_name, price) values (?,?) returning id;";
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, t.getName());
			ps.setInt(2, t.getPrice());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()){
				t.setId(rs.getInt("id"));
			}
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		return t;
	}

	@Override
	public List<Items> retrieveItems() {
		String sql = "select * from Items;";
		List<Items> items = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Items u = new Items();
				u.setId(rs.getInt("id"));
				u.setName(rs.getString("i_name"));
				u.setPrice(rs.getInt("price"));
				
				items.add(u);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return items;
	}

	@Override
	public Items retrieveItemById(int id) {
		String sql = "select * from items where id = ?;";
		Items item = null;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
				item = new Items();
				item.setId(rs.getInt("id"));
				item.setName(rs.getString("i_name"));
				item.setPrice(rs.getInt("price"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return item;
	}

	@Override
	public List<Items> retrieveItemByUserId(int id) {
		String sql = "select t.id, t.i_name, t.owned_state, t.customer_id , c.username from items t join customer c on t.customer_id = c.id where c.id = ?;";
		List<Items> items = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				Items t = new Items();
				t.setId(rs.getInt("id"));
				t.setName(rs.getString("i_name"));
				//t.setDueDate(rs.getDate("due_date").toLocalDate()); // rs.getDate returns a date that we have to convert to a local date
				t.setOwenedStatus(rs.getString("owned_state"));
				
				Customer u = new Customer();
				u.setId(rs.getInt("customer_id"));
				u.setUname(rs.getString("username"));
				
				//t.setUserAssigned(u);
				
				items.add(t);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return items;
	}

	

	@Override
	public boolean updateItem(Items t) {
		String sql = "update items set i_name = ?, price = ? where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, t.getName());
			ps.setInt(2, t.getPrice());
			ps.setInt(3, t.getId());
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	@Override
	public boolean updateItemById(Items t,int cId,int iId) {
		String sql = "update items set owned_state = 'true',customer_id = ? where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			
			ps.setInt(1, cId);
			ps.setInt(2, iId);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean updateItemCustomerId(Items t, int cId) {
		String sql = "update items set customer_id=? where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			
			ps.setInt(2, t.getId());
			ps.setInt(1,cId);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}


	

	@Override
	public boolean deleteItem(int id) {
		String sql = "delete from items where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	@Override
	public boolean deleteItemByName(String name) {
		String sql = "delete from items where i_name = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1,name);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	public List<Items> retrieveAvailableItems() {
		String sql = "select * from Items where quantity >0;";
		List<Items> items = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Items u = new Items();
				u.setId(rs.getInt("id"));
				u.setName(rs.getString("i_name"));
				u.setPrice(rs.getInt("price"));
				
				items.add(u);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return items;
	}

}
