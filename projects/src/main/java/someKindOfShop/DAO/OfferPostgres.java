package someKindOfShop.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import someKindOfShop.shoppingList.Offers;
import someKindOfShop.user.Customer;
import someKindOfShop.util.ConnectionUtil;

public class OfferPostgres implements OfferDAO {

	@Override
	public Offers addOffer(Offers f) {
		String sql = "insert into offer (c_id, i_id ,amount) values (?,?,?) returning id;";
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, f.getCustomerId());
			ps.setInt(2, f.getItemId());
			ps.setInt(3, f.getAmount());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()){
				f.setCustomerId(rs.getInt("id"));
			}
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		return f;
	}

	@Override
	public List<Offers> retrieveOffers() {
		String sql = "select * from offer;";
		List<Offers> items = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Offers u = new Offers();
				u.setId(rs.getInt("id"));
				u.setCustomerId(rs.getInt("c_id"));
				u.setItemId(rs.getInt("i_id"));
				u.setAmount(rs.getInt("amount"));
				u.setAccepted(rs.getBoolean("accepted"));
				
				items.add(u);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return items;
	}

	@Override
	public Offers retrieveOfferById(int id) {
		String sql = "select * from offers where id = ?;";
		Offers offer = null;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
				offer = new Offers();
				offer.setItemId(rs.getInt("item_id"));
				offer.setCustomerId(rs.getInt("customer_id"));
				offer.setAmount(rs.getInt("amount"));
				offer.setAccepted(rs.getBoolean("accepted"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return offer;
	}

	@Override
	public List<Offers> retrieveOfferByUserId(int id) {
		String sql = "select t.id, t.i_name, t.owned_state, t.customer_id,t.accepted , c.username from items t join customer c on t.customer_id = c.id where c.id = ?;";
		List<Offers> items = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				Offers t = new Offers();
				t.setId(rs.getInt("id"));
				t.setCustomerId(rs.getInt("customer_id"));
				//t.setDueDate(rs.getDate("due_date").toLocalDate()); // rs.getDate returns a date that we have to convert to a local date
				t.setItemId(rs.getInt("item_id"));
				t.setAccepted(rs.getBoolean("accepted"));
				
				Customer u = new Customer();
				u.setId(rs.getInt("customer_id"));
				u.setUname(rs.getString("username"));
				
				//t.setUserAssigned(u);
				
				items.add(t);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return items;
	}

	

	@Override
	public boolean deleteOffer(int id) {
		String sql = "delete from offer where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	@Override
	public boolean updateAcceptedState(int cId, int iId,boolean acc) {
		String sql = "update offer set accepted = ? where c_id = ? and i_id=?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setBoolean(1, acc);
			ps.setInt(2, cId);
			ps.setInt(3, iId);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	@Override
	public boolean rejectAllOffersByItemId(int iId) {
		String sql = "delete from offer where i_id=? and (accepted = false or accepted is null) ;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, iId);
			
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
 

}
