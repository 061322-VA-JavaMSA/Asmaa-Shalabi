package someKindOfShop.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import someKindOfShop.user.Employee;
import someKindOfShop.util.ConnectionUtil;

public class EmployeePostgres implements UserDAO{


	@Override
	public Employee createUser(Employee e) {
		String sql = "insert into employee (username, password) values (?,?) returning id;";
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, e.getUname());
			ps.setString(2, e.getPass());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()){
				e.setId(rs.getInt("id"));
			}
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		return e;
	}

	

	@Override
	public Employee retrieveUserById(int id) {
		String sql = "select * from employee where id = ?;";
		Employee user = null;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
				user = new Employee();
				user.setId(rs.getInt("id"));
				user.setUname(rs.getString("username"));
				user.setPass(rs.getString("password"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return user;
	}
	
	

	@Override
	public List<Employee> retrieveUsers() {
		String sql = "select * from employee;";
		List<Employee> users = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Employee u = new Employee();
				u.setId(rs.getInt("id"));
				u.setUname(rs.getString("username"));
				u.setPass(rs.getString("password"));
				
				users.add(u);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return users;
	}

	@Override
	public Employee retrieveUserByUsername(String username) {
		String sql = "select * from employee where username  = ?;";
		Employee u = null;
		
		try (Connection c = ConnectionUtil.getConnectionFromEnv();){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, username); // this refers to the 1st "?" in the sql string, allows to inject data

			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				u = new Employee();
				u.setId(rs.getInt("id"));
				u.setUname(rs.getString("username"));
				u.setPass(rs.getString("password"));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return u;
	}

	@Override
	public boolean updateUser(Employee e) {
		String sql = "update employee set username = ?, password= ? where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, e.getUname());
			ps.setString(2, e.getPass());
			ps.setInt(3, e.getId());
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException ex) {
			// TODO Auto-generated catch block
			ex.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

	

	@Override
	public boolean deleteUserById(int id) {
		String sql = "delete from employee where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromEnv()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
}

